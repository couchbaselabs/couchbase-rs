// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LegacyDurabilitySpec {
    #[prost(uint32, tag = "1")]
    pub num_replicated: u32,
    #[prost(uint32, tag = "2")]
    pub num_persisted: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MutationToken {
    #[prost(string, tag = "1")]
    pub bucket_name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub vbucket_id: u32,
    #[prost(uint64, tag = "3")]
    pub vbucket_uuid: u64,
    #[prost(uint64, tag = "4")]
    pub seq_no: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRequest {
    #[prost(string, tag = "1")]
    pub bucket_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub scope_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub collection_name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub key: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "5")]
    pub project: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(enumeration = "CompressionEnabled", optional, tag = "6")]
    pub compression: ::core::option::Option<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetResponse {
    #[prost(uint32, tag = "6")]
    pub content_flags: u32,
    #[prost(uint64, tag = "3")]
    pub cas: u64,
    #[prost(message, optional, tag = "4")]
    pub expiry: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(oneof = "get_response::Content", tags = "1, 7")]
    pub content: ::core::option::Option<get_response::Content>,
}
/// Nested message and enum types in `GetResponse`.
pub mod get_response {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Content {
        #[prost(bytes, tag = "1")]
        ContentUncompressed(::prost::alloc::vec::Vec<u8>),
        #[prost(bytes, tag = "7")]
        ContentCompressed(::prost::alloc::vec::Vec<u8>),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAndTouchRequest {
    #[prost(string, tag = "1")]
    pub bucket_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub scope_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub collection_name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub key: ::prost::alloc::string::String,
    #[prost(enumeration = "CompressionEnabled", optional, tag = "7")]
    pub compression: ::core::option::Option<i32>,
    #[prost(oneof = "get_and_touch_request::Expiry", tags = "5, 6")]
    pub expiry: ::core::option::Option<get_and_touch_request::Expiry>,
}
/// Nested message and enum types in `GetAndTouchRequest`.
pub mod get_and_touch_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Expiry {
        #[prost(message, tag = "5")]
        ExpiryTime(::prost_types::Timestamp),
        #[prost(uint32, tag = "6")]
        ExpirySecs(u32),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAndTouchResponse {
    #[prost(uint32, tag = "6")]
    pub content_flags: u32,
    #[prost(uint64, tag = "3")]
    pub cas: u64,
    #[prost(message, optional, tag = "4")]
    pub expiry: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(oneof = "get_and_touch_response::Content", tags = "1, 7")]
    pub content: ::core::option::Option<get_and_touch_response::Content>,
}
/// Nested message and enum types in `GetAndTouchResponse`.
pub mod get_and_touch_response {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Content {
        #[prost(bytes, tag = "1")]
        ContentUncompressed(::prost::alloc::vec::Vec<u8>),
        #[prost(bytes, tag = "7")]
        ContentCompressed(::prost::alloc::vec::Vec<u8>),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAndLockRequest {
    #[prost(string, tag = "1")]
    pub bucket_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub scope_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub collection_name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub key: ::prost::alloc::string::String,
    #[prost(uint32, tag = "5")]
    pub lock_time: u32,
    #[prost(enumeration = "CompressionEnabled", optional, tag = "6")]
    pub compression: ::core::option::Option<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAndLockResponse {
    #[prost(uint32, tag = "6")]
    pub content_flags: u32,
    #[prost(uint64, tag = "3")]
    pub cas: u64,
    #[prost(message, optional, tag = "4")]
    pub expiry: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(oneof = "get_and_lock_response::Content", tags = "1, 7")]
    pub content: ::core::option::Option<get_and_lock_response::Content>,
}
/// Nested message and enum types in `GetAndLockResponse`.
pub mod get_and_lock_response {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Content {
        #[prost(bytes, tag = "1")]
        ContentUncompressed(::prost::alloc::vec::Vec<u8>),
        #[prost(bytes, tag = "7")]
        ContentCompressed(::prost::alloc::vec::Vec<u8>),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnlockRequest {
    #[prost(string, tag = "1")]
    pub bucket_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub scope_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub collection_name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub key: ::prost::alloc::string::String,
    #[prost(uint64, tag = "5")]
    pub cas: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockResponse {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TouchRequest {
    #[prost(string, tag = "1")]
    pub bucket_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub scope_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub collection_name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub key: ::prost::alloc::string::String,
    #[prost(oneof = "touch_request::Expiry", tags = "5, 6")]
    pub expiry: ::core::option::Option<touch_request::Expiry>,
}
/// Nested message and enum types in `TouchRequest`.
pub mod touch_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Expiry {
        #[prost(message, tag = "5")]
        ExpiryTime(::prost_types::Timestamp),
        #[prost(uint32, tag = "6")]
        ExpirySecs(u32),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TouchResponse {
    #[prost(uint64, tag = "1")]
    pub cas: u64,
    #[prost(message, optional, tag = "2")]
    pub mutation_token: ::core::option::Option<MutationToken>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExistsRequest {
    #[prost(string, tag = "1")]
    pub bucket_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub scope_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub collection_name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub key: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExistsResponse {
    #[prost(bool, tag = "1")]
    pub result: bool,
    #[prost(uint64, tag = "2")]
    pub cas: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InsertRequest {
    #[prost(string, tag = "1")]
    pub bucket_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub scope_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub collection_name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub key: ::prost::alloc::string::String,
    #[prost(uint32, tag = "11")]
    pub content_flags: u32,
    #[prost(enumeration = "DurabilityLevel", optional, tag = "9")]
    pub durability_level: ::core::option::Option<i32>,
    #[prost(oneof = "insert_request::Content", tags = "5, 12")]
    pub content: ::core::option::Option<insert_request::Content>,
    #[prost(oneof = "insert_request::Expiry", tags = "7, 10")]
    pub expiry: ::core::option::Option<insert_request::Expiry>,
}
/// Nested message and enum types in `InsertRequest`.
pub mod insert_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Content {
        #[prost(bytes, tag = "5")]
        ContentUncompressed(::prost::alloc::vec::Vec<u8>),
        #[prost(bytes, tag = "12")]
        ContentCompressed(::prost::alloc::vec::Vec<u8>),
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Expiry {
        #[prost(message, tag = "7")]
        ExpiryTime(::prost_types::Timestamp),
        #[prost(uint32, tag = "10")]
        ExpirySecs(u32),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InsertResponse {
    #[prost(uint64, tag = "1")]
    pub cas: u64,
    #[prost(message, optional, tag = "2")]
    pub mutation_token: ::core::option::Option<MutationToken>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpsertRequest {
    #[prost(string, tag = "1")]
    pub bucket_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub scope_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub collection_name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub key: ::prost::alloc::string::String,
    #[prost(uint32, tag = "11")]
    pub content_flags: u32,
    #[prost(bool, optional, tag = "12")]
    pub preserve_expiry_on_existing: ::core::option::Option<bool>,
    #[prost(enumeration = "DurabilityLevel", optional, tag = "9")]
    pub durability_level: ::core::option::Option<i32>,
    #[prost(oneof = "upsert_request::Content", tags = "5, 13")]
    pub content: ::core::option::Option<upsert_request::Content>,
    #[prost(oneof = "upsert_request::Expiry", tags = "7, 10")]
    pub expiry: ::core::option::Option<upsert_request::Expiry>,
}
/// Nested message and enum types in `UpsertRequest`.
pub mod upsert_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Content {
        #[prost(bytes, tag = "5")]
        ContentUncompressed(::prost::alloc::vec::Vec<u8>),
        #[prost(bytes, tag = "13")]
        ContentCompressed(::prost::alloc::vec::Vec<u8>),
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Expiry {
        #[prost(message, tag = "7")]
        ExpiryTime(::prost_types::Timestamp),
        #[prost(uint32, tag = "10")]
        ExpirySecs(u32),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpsertResponse {
    #[prost(uint64, tag = "1")]
    pub cas: u64,
    #[prost(message, optional, tag = "2")]
    pub mutation_token: ::core::option::Option<MutationToken>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReplaceRequest {
    #[prost(string, tag = "1")]
    pub bucket_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub scope_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub collection_name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub key: ::prost::alloc::string::String,
    #[prost(uint32, tag = "12")]
    pub content_flags: u32,
    #[prost(uint64, optional, tag = "7")]
    pub cas: ::core::option::Option<u64>,
    #[prost(enumeration = "DurabilityLevel", optional, tag = "10")]
    pub durability_level: ::core::option::Option<i32>,
    #[prost(oneof = "replace_request::Content", tags = "5, 13")]
    pub content: ::core::option::Option<replace_request::Content>,
    #[prost(oneof = "replace_request::Expiry", tags = "8, 11")]
    pub expiry: ::core::option::Option<replace_request::Expiry>,
}
/// Nested message and enum types in `ReplaceRequest`.
pub mod replace_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Content {
        #[prost(bytes, tag = "5")]
        ContentUncompressed(::prost::alloc::vec::Vec<u8>),
        #[prost(bytes, tag = "13")]
        ContentCompressed(::prost::alloc::vec::Vec<u8>),
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Expiry {
        #[prost(message, tag = "8")]
        ExpiryTime(::prost_types::Timestamp),
        #[prost(uint32, tag = "11")]
        ExpirySecs(u32),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReplaceResponse {
    #[prost(uint64, tag = "1")]
    pub cas: u64,
    #[prost(message, optional, tag = "2")]
    pub mutation_token: ::core::option::Option<MutationToken>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveRequest {
    #[prost(string, tag = "1")]
    pub bucket_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub scope_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub collection_name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub key: ::prost::alloc::string::String,
    #[prost(uint64, optional, tag = "5")]
    pub cas: ::core::option::Option<u64>,
    #[prost(enumeration = "DurabilityLevel", optional, tag = "7")]
    pub durability_level: ::core::option::Option<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveResponse {
    #[prost(uint64, tag = "1")]
    pub cas: u64,
    #[prost(message, optional, tag = "2")]
    pub mutation_token: ::core::option::Option<MutationToken>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IncrementRequest {
    #[prost(string, tag = "1")]
    pub bucket_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub scope_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub collection_name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub key: ::prost::alloc::string::String,
    #[prost(uint64, tag = "5")]
    pub delta: u64,
    #[prost(int64, optional, tag = "7")]
    pub initial: ::core::option::Option<i64>,
    #[prost(enumeration = "DurabilityLevel", optional, tag = "9")]
    pub durability_level: ::core::option::Option<i32>,
    #[prost(oneof = "increment_request::Expiry", tags = "6, 10")]
    pub expiry: ::core::option::Option<increment_request::Expiry>,
}
/// Nested message and enum types in `IncrementRequest`.
pub mod increment_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Expiry {
        #[prost(message, tag = "6")]
        ExpiryTime(::prost_types::Timestamp),
        #[prost(uint32, tag = "10")]
        ExpirySecs(u32),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IncrementResponse {
    #[prost(uint64, tag = "1")]
    pub cas: u64,
    #[prost(int64, tag = "2")]
    pub content: i64,
    #[prost(message, optional, tag = "3")]
    pub mutation_token: ::core::option::Option<MutationToken>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DecrementRequest {
    #[prost(string, tag = "1")]
    pub bucket_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub scope_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub collection_name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub key: ::prost::alloc::string::String,
    #[prost(uint64, tag = "5")]
    pub delta: u64,
    #[prost(int64, optional, tag = "7")]
    pub initial: ::core::option::Option<i64>,
    #[prost(enumeration = "DurabilityLevel", optional, tag = "9")]
    pub durability_level: ::core::option::Option<i32>,
    #[prost(oneof = "decrement_request::Expiry", tags = "6, 10")]
    pub expiry: ::core::option::Option<decrement_request::Expiry>,
}
/// Nested message and enum types in `DecrementRequest`.
pub mod decrement_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Expiry {
        #[prost(message, tag = "6")]
        ExpiryTime(::prost_types::Timestamp),
        #[prost(uint32, tag = "10")]
        ExpirySecs(u32),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DecrementResponse {
    #[prost(uint64, tag = "1")]
    pub cas: u64,
    #[prost(int64, tag = "2")]
    pub content: i64,
    #[prost(message, optional, tag = "3")]
    pub mutation_token: ::core::option::Option<MutationToken>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AppendRequest {
    #[prost(string, tag = "1")]
    pub bucket_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub scope_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub collection_name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub key: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "5")]
    pub content: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, optional, tag = "6")]
    pub cas: ::core::option::Option<u64>,
    #[prost(enumeration = "DurabilityLevel", optional, tag = "8")]
    pub durability_level: ::core::option::Option<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AppendResponse {
    #[prost(uint64, tag = "1")]
    pub cas: u64,
    #[prost(message, optional, tag = "2")]
    pub mutation_token: ::core::option::Option<MutationToken>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PrependRequest {
    #[prost(string, tag = "1")]
    pub bucket_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub scope_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub collection_name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub key: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "5")]
    pub content: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, optional, tag = "6")]
    pub cas: ::core::option::Option<u64>,
    #[prost(enumeration = "DurabilityLevel", optional, tag = "8")]
    pub durability_level: ::core::option::Option<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PrependResponse {
    #[prost(uint64, tag = "1")]
    pub cas: u64,
    #[prost(message, optional, tag = "2")]
    pub mutation_token: ::core::option::Option<MutationToken>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LookupInRequest {
    #[prost(string, tag = "1")]
    pub bucket_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub scope_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub collection_name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub key: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "5")]
    pub specs: ::prost::alloc::vec::Vec<lookup_in_request::Spec>,
    #[prost(message, optional, tag = "6")]
    pub flags: ::core::option::Option<lookup_in_request::Flags>,
}
/// Nested message and enum types in `LookupInRequest`.
pub mod lookup_in_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Spec {
        #[prost(enumeration = "spec::Operation", tag = "1")]
        pub operation: i32,
        #[prost(string, tag = "2")]
        pub path: ::prost::alloc::string::String,
        #[prost(message, optional, tag = "3")]
        pub flags: ::core::option::Option<spec::Flags>,
    }
    /// Nested message and enum types in `Spec`.
    pub mod spec {
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, Copy, PartialEq, ::prost::Message)]
        pub struct Flags {
            #[prost(bool, optional, tag = "1")]
            pub xattr: ::core::option::Option<bool>,
        }
        #[derive(
            Clone,
            Copy,
            Debug,
            PartialEq,
            Eq,
            Hash,
            PartialOrd,
            Ord,
            ::prost::Enumeration
        )]
        #[repr(i32)]
        pub enum Operation {
            Get = 0,
            Exists = 1,
            Count = 2,
        }
        impl Operation {
            /// String value of the enum field names used in the ProtoBuf definition.
            ///
            /// The values are not transformed in any way and thus are considered stable
            /// (if the ProtoBuf definition does not change) and safe for programmatic use.
            pub fn as_str_name(&self) -> &'static str {
                match self {
                    Operation::Get => "OPERATION_GET",
                    Operation::Exists => "OPERATION_EXISTS",
                    Operation::Count => "OPERATION_COUNT",
                }
            }
            /// Creates an enum from field names used in the ProtoBuf definition.
            pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
                match value {
                    "OPERATION_GET" => Some(Self::Get),
                    "OPERATION_EXISTS" => Some(Self::Exists),
                    "OPERATION_COUNT" => Some(Self::Count),
                    _ => None,
                }
            }
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Flags {
        #[prost(bool, optional, tag = "1")]
        pub access_deleted: ::core::option::Option<bool>,
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LookupInResponse {
    #[prost(message, repeated, tag = "1")]
    pub specs: ::prost::alloc::vec::Vec<lookup_in_response::Spec>,
    #[prost(uint64, tag = "2")]
    pub cas: u64,
}
/// Nested message and enum types in `LookupInResponse`.
pub mod lookup_in_response {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Spec {
        #[prost(message, optional, tag = "1")]
        pub status: ::core::option::Option<
            super::super::super::super::google::rpc::Status,
        >,
        #[prost(bytes = "vec", tag = "2")]
        pub content: ::prost::alloc::vec::Vec<u8>,
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MutateInRequest {
    #[prost(string, tag = "1")]
    pub bucket_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub scope_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub collection_name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub key: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "5")]
    pub specs: ::prost::alloc::vec::Vec<mutate_in_request::Spec>,
    #[prost(enumeration = "mutate_in_request::StoreSemantic", optional, tag = "6")]
    pub store_semantic: ::core::option::Option<i32>,
    #[prost(enumeration = "DurabilityLevel", optional, tag = "8")]
    pub durability_level: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "9")]
    pub cas: ::core::option::Option<u64>,
    #[prost(message, optional, tag = "10")]
    pub flags: ::core::option::Option<mutate_in_request::Flags>,
    #[prost(oneof = "mutate_in_request::Expiry", tags = "11, 12")]
    pub expiry: ::core::option::Option<mutate_in_request::Expiry>,
}
/// Nested message and enum types in `MutateInRequest`.
pub mod mutate_in_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Spec {
        #[prost(enumeration = "spec::Operation", tag = "1")]
        pub operation: i32,
        #[prost(string, tag = "2")]
        pub path: ::prost::alloc::string::String,
        #[prost(bytes = "vec", tag = "3")]
        pub content: ::prost::alloc::vec::Vec<u8>,
        #[prost(message, optional, tag = "4")]
        pub flags: ::core::option::Option<spec::Flags>,
    }
    /// Nested message and enum types in `Spec`.
    pub mod spec {
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, Copy, PartialEq, ::prost::Message)]
        pub struct Flags {
            #[prost(bool, optional, tag = "1")]
            pub create_path: ::core::option::Option<bool>,
            #[prost(bool, optional, tag = "2")]
            pub xattr: ::core::option::Option<bool>,
        }
        #[derive(
            Clone,
            Copy,
            Debug,
            PartialEq,
            Eq,
            Hash,
            PartialOrd,
            Ord,
            ::prost::Enumeration
        )]
        #[repr(i32)]
        pub enum Operation {
            Insert = 0,
            Upsert = 1,
            Replace = 2,
            Remove = 3,
            ArrayAppend = 4,
            ArrayPrepend = 5,
            ArrayInsert = 6,
            ArrayAddUnique = 7,
            Counter = 8,
        }
        impl Operation {
            /// String value of the enum field names used in the ProtoBuf definition.
            ///
            /// The values are not transformed in any way and thus are considered stable
            /// (if the ProtoBuf definition does not change) and safe for programmatic use.
            pub fn as_str_name(&self) -> &'static str {
                match self {
                    Operation::Insert => "OPERATION_INSERT",
                    Operation::Upsert => "OPERATION_UPSERT",
                    Operation::Replace => "OPERATION_REPLACE",
                    Operation::Remove => "OPERATION_REMOVE",
                    Operation::ArrayAppend => "OPERATION_ARRAY_APPEND",
                    Operation::ArrayPrepend => "OPERATION_ARRAY_PREPEND",
                    Operation::ArrayInsert => "OPERATION_ARRAY_INSERT",
                    Operation::ArrayAddUnique => "OPERATION_ARRAY_ADD_UNIQUE",
                    Operation::Counter => "OPERATION_COUNTER",
                }
            }
            /// Creates an enum from field names used in the ProtoBuf definition.
            pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
                match value {
                    "OPERATION_INSERT" => Some(Self::Insert),
                    "OPERATION_UPSERT" => Some(Self::Upsert),
                    "OPERATION_REPLACE" => Some(Self::Replace),
                    "OPERATION_REMOVE" => Some(Self::Remove),
                    "OPERATION_ARRAY_APPEND" => Some(Self::ArrayAppend),
                    "OPERATION_ARRAY_PREPEND" => Some(Self::ArrayPrepend),
                    "OPERATION_ARRAY_INSERT" => Some(Self::ArrayInsert),
                    "OPERATION_ARRAY_ADD_UNIQUE" => Some(Self::ArrayAddUnique),
                    "OPERATION_COUNTER" => Some(Self::Counter),
                    _ => None,
                }
            }
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Flags {
        #[prost(bool, optional, tag = "1")]
        pub access_deleted: ::core::option::Option<bool>,
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum StoreSemantic {
        Replace = 0,
        Upsert = 1,
        Insert = 2,
    }
    impl StoreSemantic {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                StoreSemantic::Replace => "STORE_SEMANTIC_REPLACE",
                StoreSemantic::Upsert => "STORE_SEMANTIC_UPSERT",
                StoreSemantic::Insert => "STORE_SEMANTIC_INSERT",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STORE_SEMANTIC_REPLACE" => Some(Self::Replace),
                "STORE_SEMANTIC_UPSERT" => Some(Self::Upsert),
                "STORE_SEMANTIC_INSERT" => Some(Self::Insert),
                _ => None,
            }
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Expiry {
        #[prost(message, tag = "11")]
        ExpiryTime(::prost_types::Timestamp),
        #[prost(uint32, tag = "12")]
        ExpirySecs(u32),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MutateInResponse {
    #[prost(message, repeated, tag = "1")]
    pub specs: ::prost::alloc::vec::Vec<mutate_in_response::Spec>,
    #[prost(uint64, tag = "2")]
    pub cas: u64,
    #[prost(message, optional, tag = "3")]
    pub mutation_token: ::core::option::Option<MutationToken>,
}
/// Nested message and enum types in `MutateInResponse`.
pub mod mutate_in_response {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Spec {
        #[prost(bytes = "vec", optional, tag = "1")]
        pub content: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAllReplicasRequest {
    #[prost(string, tag = "1")]
    pub bucket_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub scope_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub collection_name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub key: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAllReplicasResponse {
    #[prost(bool, tag = "1")]
    pub is_replica: bool,
    #[prost(bytes = "vec", tag = "2")]
    pub content: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "3")]
    pub content_flags: u32,
    #[prost(uint64, tag = "4")]
    pub cas: u64,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DurabilityLevel {
    Majority = 0,
    MajorityAndPersistToActive = 1,
    PersistToMajority = 2,
}
impl DurabilityLevel {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            DurabilityLevel::Majority => "DURABILITY_LEVEL_MAJORITY",
            DurabilityLevel::MajorityAndPersistToActive => {
                "DURABILITY_LEVEL_MAJORITY_AND_PERSIST_TO_ACTIVE"
            }
            DurabilityLevel::PersistToMajority => "DURABILITY_LEVEL_PERSIST_TO_MAJORITY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DURABILITY_LEVEL_MAJORITY" => Some(Self::Majority),
            "DURABILITY_LEVEL_MAJORITY_AND_PERSIST_TO_ACTIVE" => {
                Some(Self::MajorityAndPersistToActive)
            }
            "DURABILITY_LEVEL_PERSIST_TO_MAJORITY" => Some(Self::PersistToMajority),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CompressionEnabled {
    Optional = 0,
    Always = 1,
}
impl CompressionEnabled {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CompressionEnabled::Optional => "COMPRESSION_ENABLED_OPTIONAL",
            CompressionEnabled::Always => "COMPRESSION_ENABLED_ALWAYS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "COMPRESSION_ENABLED_OPTIONAL" => Some(Self::Optional),
            "COMPRESSION_ENABLED_ALWAYS" => Some(Self::Always),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod kv_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct KvServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl KvServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> KvServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> KvServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            KvServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn get(
            &mut self,
            request: impl tonic::IntoRequest<super::GetRequest>,
        ) -> std::result::Result<tonic::Response<super::GetResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/couchbase.kv.v1.KvService/Get",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("couchbase.kv.v1.KvService", "Get"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_and_touch(
            &mut self,
            request: impl tonic::IntoRequest<super::GetAndTouchRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetAndTouchResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/couchbase.kv.v1.KvService/GetAndTouch",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("couchbase.kv.v1.KvService", "GetAndTouch"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_and_lock(
            &mut self,
            request: impl tonic::IntoRequest<super::GetAndLockRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetAndLockResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/couchbase.kv.v1.KvService/GetAndLock",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("couchbase.kv.v1.KvService", "GetAndLock"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn unlock(
            &mut self,
            request: impl tonic::IntoRequest<super::UnlockRequest>,
        ) -> std::result::Result<tonic::Response<super::UnlockResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/couchbase.kv.v1.KvService/Unlock",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("couchbase.kv.v1.KvService", "Unlock"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn touch(
            &mut self,
            request: impl tonic::IntoRequest<super::TouchRequest>,
        ) -> std::result::Result<tonic::Response<super::TouchResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/couchbase.kv.v1.KvService/Touch",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("couchbase.kv.v1.KvService", "Touch"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn exists(
            &mut self,
            request: impl tonic::IntoRequest<super::ExistsRequest>,
        ) -> std::result::Result<tonic::Response<super::ExistsResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/couchbase.kv.v1.KvService/Exists",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("couchbase.kv.v1.KvService", "Exists"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn insert(
            &mut self,
            request: impl tonic::IntoRequest<super::InsertRequest>,
        ) -> std::result::Result<tonic::Response<super::InsertResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/couchbase.kv.v1.KvService/Insert",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("couchbase.kv.v1.KvService", "Insert"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn upsert(
            &mut self,
            request: impl tonic::IntoRequest<super::UpsertRequest>,
        ) -> std::result::Result<tonic::Response<super::UpsertResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/couchbase.kv.v1.KvService/Upsert",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("couchbase.kv.v1.KvService", "Upsert"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn replace(
            &mut self,
            request: impl tonic::IntoRequest<super::ReplaceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ReplaceResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/couchbase.kv.v1.KvService/Replace",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("couchbase.kv.v1.KvService", "Replace"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn remove(
            &mut self,
            request: impl tonic::IntoRequest<super::RemoveRequest>,
        ) -> std::result::Result<tonic::Response<super::RemoveResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/couchbase.kv.v1.KvService/Remove",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("couchbase.kv.v1.KvService", "Remove"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn increment(
            &mut self,
            request: impl tonic::IntoRequest<super::IncrementRequest>,
        ) -> std::result::Result<
            tonic::Response<super::IncrementResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/couchbase.kv.v1.KvService/Increment",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("couchbase.kv.v1.KvService", "Increment"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn decrement(
            &mut self,
            request: impl tonic::IntoRequest<super::DecrementRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DecrementResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/couchbase.kv.v1.KvService/Decrement",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("couchbase.kv.v1.KvService", "Decrement"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn append(
            &mut self,
            request: impl tonic::IntoRequest<super::AppendRequest>,
        ) -> std::result::Result<tonic::Response<super::AppendResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/couchbase.kv.v1.KvService/Append",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("couchbase.kv.v1.KvService", "Append"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn prepend(
            &mut self,
            request: impl tonic::IntoRequest<super::PrependRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PrependResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/couchbase.kv.v1.KvService/Prepend",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("couchbase.kv.v1.KvService", "Prepend"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn lookup_in(
            &mut self,
            request: impl tonic::IntoRequest<super::LookupInRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LookupInResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/couchbase.kv.v1.KvService/LookupIn",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("couchbase.kv.v1.KvService", "LookupIn"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn mutate_in(
            &mut self,
            request: impl tonic::IntoRequest<super::MutateInRequest>,
        ) -> std::result::Result<
            tonic::Response<super::MutateInResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/couchbase.kv.v1.KvService/MutateIn",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("couchbase.kv.v1.KvService", "MutateIn"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_all_replicas(
            &mut self,
            request: impl tonic::IntoRequest<super::GetAllReplicasRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::GetAllReplicasResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/couchbase.kv.v1.KvService/GetAllReplicas",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("couchbase.kv.v1.KvService", "GetAllReplicas"));
            self.inner.server_streaming(req, path, codec).await
        }
    }
}
