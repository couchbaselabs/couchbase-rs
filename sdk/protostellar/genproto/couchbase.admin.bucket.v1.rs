// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ListBucketsRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListBucketsResponse {
    #[prost(message, repeated, tag = "1")]
    pub buckets: ::prost::alloc::vec::Vec<list_buckets_response::Bucket>,
}
/// Nested message and enum types in `ListBucketsResponse`.
pub mod list_buckets_response {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Bucket {
        #[prost(string, tag = "1")]
        pub bucket_name: ::prost::alloc::string::String,
        #[prost(bool, tag = "2")]
        pub flush_enabled: bool,
        #[prost(uint64, tag = "3")]
        pub ram_quota_mb: u64,
        #[prost(uint32, tag = "4")]
        pub num_replicas: u32,
        #[prost(bool, tag = "5")]
        pub replica_indexes: bool,
        #[prost(enumeration = "super::BucketType", tag = "6")]
        pub bucket_type: i32,
        #[prost(enumeration = "super::EvictionMode", tag = "7")]
        pub eviction_mode: i32,
        #[prost(uint32, tag = "8")]
        pub max_expiry_secs: u32,
        #[prost(enumeration = "super::CompressionMode", tag = "9")]
        pub compression_mode: i32,
        #[prost(
            enumeration = "super::super::super::super::kv::v1::DurabilityLevel",
            optional,
            tag = "10"
        )]
        pub minimum_durability_level: ::core::option::Option<i32>,
        #[prost(enumeration = "super::StorageBackend", optional, tag = "11")]
        pub storage_backend: ::core::option::Option<i32>,
        #[prost(enumeration = "super::ConflictResolutionType", tag = "12")]
        pub conflict_resolution_type: i32,
        #[prost(bool, optional, tag = "13")]
        pub history_retention_collection_default: ::core::option::Option<bool>,
        #[prost(uint64, optional, tag = "14")]
        pub history_retention_bytes: ::core::option::Option<u64>,
        #[prost(uint32, optional, tag = "15")]
        pub history_retention_duration_secs: ::core::option::Option<u32>,
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateBucketRequest {
    #[prost(string, tag = "1")]
    pub bucket_name: ::prost::alloc::string::String,
    #[prost(enumeration = "BucketType", tag = "2")]
    pub bucket_type: i32,
    #[prost(uint64, optional, tag = "3")]
    pub ram_quota_mb: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "4")]
    pub num_replicas: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "5")]
    pub flush_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6")]
    pub replica_indexes: ::core::option::Option<bool>,
    #[prost(enumeration = "EvictionMode", optional, tag = "7")]
    pub eviction_mode: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "8")]
    pub max_expiry_secs: ::core::option::Option<u32>,
    #[prost(enumeration = "CompressionMode", optional, tag = "9")]
    pub compression_mode: ::core::option::Option<i32>,
    #[prost(
        enumeration = "super::super::super::kv::v1::DurabilityLevel",
        optional,
        tag = "10"
    )]
    pub minimum_durability_level: ::core::option::Option<i32>,
    #[prost(enumeration = "StorageBackend", optional, tag = "11")]
    pub storage_backend: ::core::option::Option<i32>,
    #[prost(enumeration = "ConflictResolutionType", optional, tag = "12")]
    pub conflict_resolution_type: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "13")]
    pub history_retention_collection_default: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "14")]
    pub history_retention_bytes: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "15")]
    pub history_retention_duration_secs: ::core::option::Option<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateBucketResponse {
    #[prost(string, tag = "1")]
    pub bucket_uuid: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateBucketRequest {
    #[prost(string, tag = "1")]
    pub bucket_name: ::prost::alloc::string::String,
    #[prost(uint64, optional, tag = "2")]
    pub ram_quota_mb: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "3")]
    pub num_replicas: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "4")]
    pub flush_enabled: ::core::option::Option<bool>,
    #[prost(enumeration = "EvictionMode", optional, tag = "5")]
    pub eviction_mode: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "6")]
    pub max_expiry_secs: ::core::option::Option<u32>,
    #[prost(enumeration = "CompressionMode", optional, tag = "7")]
    pub compression_mode: ::core::option::Option<i32>,
    #[prost(
        enumeration = "super::super::super::kv::v1::DurabilityLevel",
        optional,
        tag = "8"
    )]
    pub minimum_durability_level: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "10")]
    pub history_retention_collection_default: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "11")]
    pub history_retention_bytes: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "12")]
    pub history_retention_duration_secs: ::core::option::Option<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateBucketResponse {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteBucketRequest {
    #[prost(string, tag = "1")]
    pub bucket_name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteBucketResponse {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FlushBucketRequest {
    #[prost(string, tag = "1")]
    pub bucket_name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FlushBucketResponse {}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BucketType {
    Couchbase = 0,
    Ephemeral = 1,
}
impl BucketType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            BucketType::Couchbase => "BUCKET_TYPE_COUCHBASE",
            BucketType::Ephemeral => "BUCKET_TYPE_EPHEMERAL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BUCKET_TYPE_COUCHBASE" => Some(Self::Couchbase),
            "BUCKET_TYPE_EPHEMERAL" => Some(Self::Ephemeral),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EvictionMode {
    Full = 0,
    NotRecentlyUsed = 1,
    ValueOnly = 2,
    None = 3,
}
impl EvictionMode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            EvictionMode::Full => "EVICTION_MODE_FULL",
            EvictionMode::NotRecentlyUsed => "EVICTION_MODE_NOT_RECENTLY_USED",
            EvictionMode::ValueOnly => "EVICTION_MODE_VALUE_ONLY",
            EvictionMode::None => "EVICTION_MODE_NONE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EVICTION_MODE_FULL" => Some(Self::Full),
            "EVICTION_MODE_NOT_RECENTLY_USED" => Some(Self::NotRecentlyUsed),
            "EVICTION_MODE_VALUE_ONLY" => Some(Self::ValueOnly),
            "EVICTION_MODE_NONE" => Some(Self::None),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CompressionMode {
    Off = 0,
    Passive = 1,
    Active = 2,
}
impl CompressionMode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CompressionMode::Off => "COMPRESSION_MODE_OFF",
            CompressionMode::Passive => "COMPRESSION_MODE_PASSIVE",
            CompressionMode::Active => "COMPRESSION_MODE_ACTIVE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "COMPRESSION_MODE_OFF" => Some(Self::Off),
            "COMPRESSION_MODE_PASSIVE" => Some(Self::Passive),
            "COMPRESSION_MODE_ACTIVE" => Some(Self::Active),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum StorageBackend {
    Couchstore = 0,
    Magma = 1,
}
impl StorageBackend {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            StorageBackend::Couchstore => "STORAGE_BACKEND_COUCHSTORE",
            StorageBackend::Magma => "STORAGE_BACKEND_MAGMA",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STORAGE_BACKEND_COUCHSTORE" => Some(Self::Couchstore),
            "STORAGE_BACKEND_MAGMA" => Some(Self::Magma),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ConflictResolutionType {
    Timestamp = 0,
    SequenceNumber = 1,
    Custom = 2,
}
impl ConflictResolutionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ConflictResolutionType::Timestamp => "CONFLICT_RESOLUTION_TYPE_TIMESTAMP",
            ConflictResolutionType::SequenceNumber => {
                "CONFLICT_RESOLUTION_TYPE_SEQUENCE_NUMBER"
            }
            ConflictResolutionType::Custom => "CONFLICT_RESOLUTION_TYPE_CUSTOM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CONFLICT_RESOLUTION_TYPE_TIMESTAMP" => Some(Self::Timestamp),
            "CONFLICT_RESOLUTION_TYPE_SEQUENCE_NUMBER" => Some(Self::SequenceNumber),
            "CONFLICT_RESOLUTION_TYPE_CUSTOM" => Some(Self::Custom),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod bucket_admin_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct BucketAdminServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl BucketAdminServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> BucketAdminServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> BucketAdminServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            BucketAdminServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn list_buckets(
            &mut self,
            request: impl tonic::IntoRequest<super::ListBucketsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListBucketsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/couchbase.admin.bucket.v1.BucketAdminService/ListBuckets",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "couchbase.admin.bucket.v1.BucketAdminService",
                        "ListBuckets",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn create_bucket(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateBucketRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateBucketResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/couchbase.admin.bucket.v1.BucketAdminService/CreateBucket",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "couchbase.admin.bucket.v1.BucketAdminService",
                        "CreateBucket",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_bucket(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateBucketRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateBucketResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/couchbase.admin.bucket.v1.BucketAdminService/UpdateBucket",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "couchbase.admin.bucket.v1.BucketAdminService",
                        "UpdateBucket",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_bucket(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteBucketRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteBucketResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/couchbase.admin.bucket.v1.BucketAdminService/DeleteBucket",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "couchbase.admin.bucket.v1.BucketAdminService",
                        "DeleteBucket",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn flush_bucket(
            &mut self,
            request: impl tonic::IntoRequest<super::FlushBucketRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FlushBucketResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/couchbase.admin.bucket.v1.BucketAdminService/FlushBucket",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "couchbase.admin.bucket.v1.BucketAdminService",
                        "FlushBucket",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
