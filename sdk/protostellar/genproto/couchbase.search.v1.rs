// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BooleanFieldQuery {
    #[prost(float, optional, tag = "1")]
    pub boost: ::core::option::Option<f32>,
    #[prost(string, optional, tag = "2")]
    pub field: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, tag = "6")]
    pub value: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BooleanQuery {
    #[prost(float, optional, tag = "1")]
    pub boost: ::core::option::Option<f32>,
    #[prost(message, optional, tag = "2")]
    pub must: ::core::option::Option<ConjunctionQuery>,
    #[prost(message, optional, tag = "3")]
    pub must_not: ::core::option::Option<DisjunctionQuery>,
    #[prost(message, optional, tag = "4")]
    pub should: ::core::option::Option<DisjunctionQuery>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConjunctionQuery {
    #[prost(float, optional, tag = "1")]
    pub boost: ::core::option::Option<f32>,
    #[prost(message, repeated, tag = "2")]
    pub queries: ::prost::alloc::vec::Vec<Query>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DateRangeQuery {
    #[prost(float, optional, tag = "1")]
    pub boost: ::core::option::Option<f32>,
    #[prost(string, optional, tag = "2")]
    pub field: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub date_time_parser: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub start_date: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub end_date: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DisjunctionQuery {
    #[prost(float, optional, tag = "1")]
    pub boost: ::core::option::Option<f32>,
    #[prost(message, repeated, tag = "2")]
    pub queries: ::prost::alloc::vec::Vec<Query>,
    #[prost(uint32, optional, tag = "3")]
    pub minimum: ::core::option::Option<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DocIdQuery {
    #[prost(float, optional, tag = "1")]
    pub boost: ::core::option::Option<f32>,
    #[prost(string, repeated, tag = "3")]
    pub ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LatLng {
    #[prost(double, tag = "1")]
    pub latitude: f64,
    #[prost(double, tag = "2")]
    pub longitude: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GeoBoundingBoxQuery {
    #[prost(float, optional, tag = "1")]
    pub boost: ::core::option::Option<f32>,
    #[prost(string, optional, tag = "2")]
    pub field: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "3")]
    pub top_left: ::core::option::Option<LatLng>,
    #[prost(message, optional, tag = "4")]
    pub bottom_right: ::core::option::Option<LatLng>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GeoDistanceQuery {
    #[prost(float, optional, tag = "1")]
    pub boost: ::core::option::Option<f32>,
    #[prost(string, optional, tag = "2")]
    pub field: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "3")]
    pub center: ::core::option::Option<LatLng>,
    #[prost(string, tag = "4")]
    pub distance: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GeoPolygonQuery {
    #[prost(float, optional, tag = "1")]
    pub boost: ::core::option::Option<f32>,
    #[prost(string, optional, tag = "2")]
    pub field: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "3")]
    pub vertices: ::prost::alloc::vec::Vec<LatLng>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MatchAllQuery {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MatchNoneQuery {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MatchPhraseQuery {
    #[prost(float, optional, tag = "1")]
    pub boost: ::core::option::Option<f32>,
    #[prost(string, optional, tag = "2")]
    pub field: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "3")]
    pub phrase: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "4")]
    pub analyzer: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MatchQuery {
    #[prost(float, optional, tag = "1")]
    pub boost: ::core::option::Option<f32>,
    #[prost(string, optional, tag = "2")]
    pub field: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "3")]
    pub value: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "4")]
    pub analyzer: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "5")]
    pub fuzziness: ::core::option::Option<u64>,
    #[prost(enumeration = "match_query::Operator", optional, tag = "6")]
    pub operator: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "7")]
    pub prefix_length: ::core::option::Option<u64>,
}
/// Nested message and enum types in `MatchQuery`.
pub mod match_query {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Operator {
        Or = 0,
        And = 1,
    }
    impl Operator {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Operator::Or => "OPERATOR_OR",
                Operator::And => "OPERATOR_AND",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "OPERATOR_OR" => Some(Self::Or),
                "OPERATOR_AND" => Some(Self::And),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NumericRangeQuery {
    #[prost(float, optional, tag = "1")]
    pub boost: ::core::option::Option<f32>,
    #[prost(string, optional, tag = "2")]
    pub field: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(float, optional, tag = "3")]
    pub min: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "4")]
    pub max: ::core::option::Option<f32>,
    #[prost(bool, optional, tag = "5")]
    pub inclusive_min: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6")]
    pub inclusive_max: ::core::option::Option<bool>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PhraseQuery {
    #[prost(float, optional, tag = "1")]
    pub boost: ::core::option::Option<f32>,
    #[prost(string, optional, tag = "2")]
    pub field: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "3")]
    pub terms: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PrefixQuery {
    #[prost(float, optional, tag = "1")]
    pub boost: ::core::option::Option<f32>,
    #[prost(string, optional, tag = "2")]
    pub field: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "3")]
    pub prefix: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryStringQuery {
    #[prost(float, optional, tag = "1")]
    pub boost: ::core::option::Option<f32>,
    #[prost(string, tag = "3")]
    pub query_string: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegexpQuery {
    #[prost(float, optional, tag = "1")]
    pub boost: ::core::option::Option<f32>,
    #[prost(string, optional, tag = "2")]
    pub field: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "3")]
    pub regexp: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TermQuery {
    #[prost(float, optional, tag = "1")]
    pub boost: ::core::option::Option<f32>,
    #[prost(string, optional, tag = "2")]
    pub field: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "3")]
    pub term: ::prost::alloc::string::String,
    #[prost(uint64, optional, tag = "4")]
    pub fuzziness: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "5")]
    pub prefix_length: ::core::option::Option<u64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TermRangeQuery {
    #[prost(float, optional, tag = "1")]
    pub boost: ::core::option::Option<f32>,
    #[prost(string, optional, tag = "2")]
    pub field: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub min: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub max: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "7")]
    pub inclusive_min: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "8")]
    pub inclusive_max: ::core::option::Option<bool>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WildcardQuery {
    #[prost(float, optional, tag = "1")]
    pub boost: ::core::option::Option<f32>,
    #[prost(string, optional, tag = "2")]
    pub field: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "3")]
    pub wildcard: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Query {
    #[prost(
        oneof = "query::Query",
        tags = "1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21"
    )]
    pub query: ::core::option::Option<query::Query>,
}
/// Nested message and enum types in `Query`.
pub mod query {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Query {
        #[prost(message, tag = "1")]
        BooleanFieldQuery(super::BooleanFieldQuery),
        #[prost(message, tag = "2")]
        BooleanQuery(super::BooleanQuery),
        #[prost(message, tag = "3")]
        ConjunctionQuery(super::ConjunctionQuery),
        #[prost(message, tag = "4")]
        DateRangeQuery(super::DateRangeQuery),
        #[prost(message, tag = "5")]
        DisjunctionQuery(super::DisjunctionQuery),
        #[prost(message, tag = "6")]
        DocIdQuery(super::DocIdQuery),
        #[prost(message, tag = "7")]
        GeoBoundingBoxQuery(super::GeoBoundingBoxQuery),
        #[prost(message, tag = "8")]
        GeoDistanceQuery(super::GeoDistanceQuery),
        #[prost(message, tag = "9")]
        GeoPolygonQuery(super::GeoPolygonQuery),
        #[prost(message, tag = "10")]
        MatchAllQuery(super::MatchAllQuery),
        #[prost(message, tag = "11")]
        MatchNoneQuery(super::MatchNoneQuery),
        #[prost(message, tag = "12")]
        MatchPhraseQuery(super::MatchPhraseQuery),
        #[prost(message, tag = "13")]
        MatchQuery(super::MatchQuery),
        #[prost(message, tag = "14")]
        NumericRangeQuery(super::NumericRangeQuery),
        #[prost(message, tag = "15")]
        PhraseQuery(super::PhraseQuery),
        #[prost(message, tag = "16")]
        PrefixQuery(super::PrefixQuery),
        #[prost(message, tag = "17")]
        QueryStringQuery(super::QueryStringQuery),
        #[prost(message, tag = "18")]
        RegexpQuery(super::RegexpQuery),
        #[prost(message, tag = "19")]
        TermQuery(super::TermQuery),
        #[prost(message, tag = "20")]
        TermRangeQuery(super::TermRangeQuery),
        #[prost(message, tag = "21")]
        WildcardQuery(super::WildcardQuery),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FieldSorting {
    #[prost(string, tag = "1")]
    pub field: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub descending: bool,
    #[prost(string, tag = "3")]
    pub missing: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub mode: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub r#type: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GeoDistanceSorting {
    #[prost(string, tag = "1")]
    pub field: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub descending: bool,
    #[prost(message, optional, tag = "3")]
    pub center: ::core::option::Option<LatLng>,
    #[prost(string, tag = "4")]
    pub unit: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct IdSorting {
    #[prost(bool, tag = "1")]
    pub descending: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ScoreSorting {
    #[prost(bool, tag = "1")]
    pub descending: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sorting {
    #[prost(oneof = "sorting::Sorting", tags = "1, 2, 3, 4")]
    pub sorting: ::core::option::Option<sorting::Sorting>,
}
/// Nested message and enum types in `Sorting`.
pub mod sorting {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Sorting {
        #[prost(message, tag = "1")]
        FieldSorting(super::FieldSorting),
        #[prost(message, tag = "2")]
        GeoDistanceSorting(super::GeoDistanceSorting),
        #[prost(message, tag = "3")]
        IdSorting(super::IdSorting),
        #[prost(message, tag = "4")]
        ScoreSorting(super::ScoreSorting),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DateRange {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    pub start: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub end: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DateRangeFacet {
    #[prost(string, tag = "1")]
    pub field: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub size: u32,
    #[prost(message, repeated, tag = "3")]
    pub date_ranges: ::prost::alloc::vec::Vec<DateRange>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NumericRange {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(float, optional, tag = "2")]
    pub min: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "3")]
    pub max: ::core::option::Option<f32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NumericRangeFacet {
    #[prost(string, tag = "1")]
    pub field: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub size: u32,
    #[prost(message, repeated, tag = "3")]
    pub numeric_ranges: ::prost::alloc::vec::Vec<NumericRange>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TermFacet {
    #[prost(string, tag = "1")]
    pub field: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub size: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Facet {
    #[prost(oneof = "facet::Facet", tags = "1, 2, 3")]
    pub facet: ::core::option::Option<facet::Facet>,
}
/// Nested message and enum types in `Facet`.
pub mod facet {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Facet {
        #[prost(message, tag = "1")]
        DateRangeFacet(super::DateRangeFacet),
        #[prost(message, tag = "2")]
        NumericRangeFacet(super::NumericRangeFacet),
        #[prost(message, tag = "3")]
        TermFacet(super::TermFacet),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KnnQuery {
    #[prost(string, tag = "1")]
    pub field: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub k: i64,
    #[prost(float, repeated, tag = "3")]
    pub vector: ::prost::alloc::vec::Vec<f32>,
    #[prost(float, optional, tag = "4")]
    pub boost: ::core::option::Option<f32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchQueryRequest {
    #[prost(string, tag = "1")]
    pub index_name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub query: ::core::option::Option<Query>,
    #[prost(enumeration = "search_query_request::ScanConsistency", tag = "3")]
    pub scan_consistency: i32,
    #[prost(uint32, tag = "4")]
    pub limit: u32,
    #[prost(uint32, tag = "5")]
    pub skip: u32,
    #[prost(bool, tag = "6")]
    pub include_explanation: bool,
    #[prost(enumeration = "search_query_request::HighlightStyle", tag = "7")]
    pub highlight_style: i32,
    #[prost(string, repeated, tag = "8")]
    pub highlight_fields: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "9")]
    pub fields: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "10")]
    pub sort: ::prost::alloc::vec::Vec<Sorting>,
    #[prost(bool, tag = "11")]
    pub disable_scoring: bool,
    #[prost(string, repeated, tag = "12")]
    pub collections: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag = "13")]
    pub include_locations: bool,
    #[prost(map = "string, message", tag = "14")]
    pub facets: ::std::collections::HashMap<::prost::alloc::string::String, Facet>,
    #[prost(message, repeated, tag = "17")]
    pub knn: ::prost::alloc::vec::Vec<KnnQuery>,
    #[prost(enumeration = "KnnOperator", optional, tag = "18")]
    pub knn_operator: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "15")]
    pub bucket_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "16")]
    pub scope_name: ::core::option::Option<::prost::alloc::string::String>,
}
/// Nested message and enum types in `SearchQueryRequest`.
pub mod search_query_request {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ScanConsistency {
        NotBounded = 0,
    }
    impl ScanConsistency {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                ScanConsistency::NotBounded => "SCAN_CONSISTENCY_NOT_BOUNDED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "SCAN_CONSISTENCY_NOT_BOUNDED" => Some(Self::NotBounded),
                _ => None,
            }
        }
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum HighlightStyle {
        Default = 0,
        Html = 1,
        Ansi = 2,
    }
    impl HighlightStyle {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                HighlightStyle::Default => "HIGHLIGHT_STYLE_DEFAULT",
                HighlightStyle::Html => "HIGHLIGHT_STYLE_HTML",
                HighlightStyle::Ansi => "HIGHLIGHT_STYLE_ANSI",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "HIGHLIGHT_STYLE_DEFAULT" => Some(Self::Default),
                "HIGHLIGHT_STYLE_HTML" => Some(Self::Html),
                "HIGHLIGHT_STYLE_ANSI" => Some(Self::Ansi),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchQueryResponse {
    #[prost(message, repeated, tag = "1")]
    pub hits: ::prost::alloc::vec::Vec<search_query_response::SearchQueryRow>,
    #[prost(map = "string, message", tag = "2")]
    pub facets: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        search_query_response::FacetResult,
    >,
    #[prost(message, optional, tag = "3")]
    pub meta_data: ::core::option::Option<search_query_response::MetaData>,
}
/// Nested message and enum types in `SearchQueryResponse`.
pub mod search_query_response {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct SearchQueryRow {
        #[prost(string, tag = "1")]
        pub id: ::prost::alloc::string::String,
        #[prost(double, tag = "2")]
        pub score: f64,
        #[prost(string, tag = "3")]
        pub index: ::prost::alloc::string::String,
        #[prost(bytes = "vec", tag = "4")]
        pub explanation: ::prost::alloc::vec::Vec<u8>,
        #[prost(message, repeated, tag = "5")]
        pub locations: ::prost::alloc::vec::Vec<Location>,
        #[prost(map = "string, message", tag = "6")]
        pub fragments: ::std::collections::HashMap<
            ::prost::alloc::string::String,
            Fragment,
        >,
        #[prost(map = "string, bytes", tag = "7")]
        pub fields: ::std::collections::HashMap<
            ::prost::alloc::string::String,
            ::prost::alloc::vec::Vec<u8>,
        >,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Location {
        #[prost(string, tag = "1")]
        pub field: ::prost::alloc::string::String,
        #[prost(string, tag = "2")]
        pub term: ::prost::alloc::string::String,
        #[prost(uint32, tag = "3")]
        pub position: u32,
        #[prost(uint32, tag = "4")]
        pub start: u32,
        #[prost(uint32, tag = "5")]
        pub end: u32,
        #[prost(uint32, repeated, tag = "6")]
        pub array_positions: ::prost::alloc::vec::Vec<u32>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Fragment {
        #[prost(string, repeated, tag = "1")]
        pub content: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct FacetResult {
        #[prost(oneof = "facet_result::SearchFacet", tags = "1, 2, 3")]
        pub search_facet: ::core::option::Option<facet_result::SearchFacet>,
    }
    /// Nested message and enum types in `FacetResult`.
    pub mod facet_result {
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum SearchFacet {
            #[prost(message, tag = "1")]
            TermFacet(super::TermFacetResult),
            #[prost(message, tag = "2")]
            DateRangeFacet(super::DateRangeFacetResult),
            #[prost(message, tag = "3")]
            NumericRangeFacet(super::NumericRangeFacetResult),
        }
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct TermResult {
        #[prost(string, tag = "1")]
        pub name: ::prost::alloc::string::String,
        #[prost(string, tag = "2")]
        pub field: ::prost::alloc::string::String,
        #[prost(uint64, tag = "3")]
        pub size: u64,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct TermFacetResult {
        #[prost(string, tag = "2")]
        pub field: ::prost::alloc::string::String,
        #[prost(int64, tag = "3")]
        pub total: i64,
        #[prost(int64, tag = "4")]
        pub missing: i64,
        #[prost(int64, tag = "5")]
        pub other: i64,
        #[prost(message, repeated, tag = "6")]
        pub terms: ::prost::alloc::vec::Vec<TermResult>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct DateRangeResult {
        #[prost(string, tag = "1")]
        pub name: ::prost::alloc::string::String,
        #[prost(uint64, tag = "2")]
        pub size: u64,
        #[prost(message, optional, tag = "3")]
        pub start: ::core::option::Option<::prost_types::Timestamp>,
        #[prost(message, optional, tag = "4")]
        pub end: ::core::option::Option<::prost_types::Timestamp>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct DateRangeFacetResult {
        #[prost(string, tag = "2")]
        pub field: ::prost::alloc::string::String,
        #[prost(int64, tag = "3")]
        pub total: i64,
        #[prost(int64, tag = "4")]
        pub missing: i64,
        #[prost(int64, tag = "5")]
        pub other: i64,
        #[prost(message, repeated, tag = "6")]
        pub date_ranges: ::prost::alloc::vec::Vec<DateRangeResult>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct NumericRangeResult {
        #[prost(string, tag = "1")]
        pub name: ::prost::alloc::string::String,
        #[prost(uint64, tag = "2")]
        pub size: u64,
        #[prost(uint64, tag = "3")]
        pub min: u64,
        #[prost(uint64, tag = "4")]
        pub max: u64,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct NumericRangeFacetResult {
        #[prost(string, tag = "2")]
        pub field: ::prost::alloc::string::String,
        #[prost(int64, tag = "3")]
        pub total: i64,
        #[prost(int64, tag = "4")]
        pub missing: i64,
        #[prost(int64, tag = "5")]
        pub other: i64,
        #[prost(message, repeated, tag = "6")]
        pub numeric_ranges: ::prost::alloc::vec::Vec<NumericRangeResult>,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct MetaData {
        #[prost(message, optional, tag = "1")]
        pub metrics: ::core::option::Option<SearchMetrics>,
        #[prost(map = "string, string", tag = "2")]
        pub errors: ::std::collections::HashMap<
            ::prost::alloc::string::String,
            ::prost::alloc::string::String,
        >,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct SearchMetrics {
        #[prost(message, optional, tag = "1")]
        pub execution_time: ::core::option::Option<::prost_types::Duration>,
        #[prost(uint64, tag = "2")]
        pub total_rows: u64,
        #[prost(double, tag = "3")]
        pub max_score: f64,
        #[prost(uint64, tag = "4")]
        pub total_partition_count: u64,
        #[prost(uint64, tag = "5")]
        pub success_partition_count: u64,
        #[prost(uint64, tag = "6")]
        pub error_partition_count: u64,
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum KnnOperator {
    Or = 0,
    And = 1,
}
impl KnnOperator {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            KnnOperator::Or => "KNN_OPERATOR_OR",
            KnnOperator::And => "KNN_OPERATOR_AND",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "KNN_OPERATOR_OR" => Some(Self::Or),
            "KNN_OPERATOR_AND" => Some(Self::And),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod search_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct SearchServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl SearchServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> SearchServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> SearchServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            SearchServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn search_query(
            &mut self,
            request: impl tonic::IntoRequest<super::SearchQueryRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SearchQueryResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/couchbase.search.v1.SearchService/SearchQuery",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("couchbase.search.v1.SearchService", "SearchQuery"),
                );
            self.inner.server_streaming(req, path, codec).await
        }
    }
}
