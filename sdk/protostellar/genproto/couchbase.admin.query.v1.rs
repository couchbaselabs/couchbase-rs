// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAllIndexesRequest {
    #[prost(string, optional, tag = "1")]
    pub bucket_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub scope_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub collection_name: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAllIndexesResponse {
    #[prost(message, repeated, tag = "1")]
    pub indexes: ::prost::alloc::vec::Vec<get_all_indexes_response::Index>,
}
/// Nested message and enum types in `GetAllIndexesResponse`.
pub mod get_all_indexes_response {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Index {
        #[prost(string, tag = "1")]
        pub bucket_name: ::prost::alloc::string::String,
        #[prost(string, tag = "2")]
        pub scope_name: ::prost::alloc::string::String,
        #[prost(string, tag = "3")]
        pub collection_name: ::prost::alloc::string::String,
        #[prost(string, tag = "4")]
        pub name: ::prost::alloc::string::String,
        #[prost(bool, tag = "5")]
        pub is_primary: bool,
        #[prost(enumeration = "super::IndexType", tag = "6")]
        pub r#type: i32,
        #[prost(enumeration = "super::IndexState", tag = "7")]
        pub state: i32,
        #[prost(string, repeated, tag = "8")]
        pub fields: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        #[prost(string, optional, tag = "9")]
        pub condition: ::core::option::Option<::prost::alloc::string::String>,
        #[prost(string, optional, tag = "10")]
        pub partition: ::core::option::Option<::prost::alloc::string::String>,
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePrimaryIndexRequest {
    #[prost(string, tag = "1")]
    pub bucket_name: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    pub scope_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub collection_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "5")]
    pub num_replicas: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "6")]
    pub deferred: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "7")]
    pub ignore_if_exists: ::core::option::Option<bool>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CreatePrimaryIndexResponse {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateIndexRequest {
    #[prost(string, tag = "1")]
    pub bucket_name: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    pub scope_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub collection_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "4")]
    pub name: ::prost::alloc::string::String,
    #[prost(int32, optional, tag = "5")]
    pub num_replicas: ::core::option::Option<i32>,
    #[prost(string, repeated, tag = "6")]
    pub fields: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "7")]
    pub deferred: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "8")]
    pub ignore_if_exists: ::core::option::Option<bool>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CreateIndexResponse {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DropPrimaryIndexRequest {
    #[prost(string, tag = "1")]
    pub bucket_name: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    pub scope_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub collection_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "5")]
    pub ignore_if_missing: ::core::option::Option<bool>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DropPrimaryIndexResponse {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DropIndexRequest {
    #[prost(string, tag = "1")]
    pub bucket_name: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    pub scope_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub collection_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "4")]
    pub name: ::prost::alloc::string::String,
    #[prost(bool, optional, tag = "5")]
    pub ignore_if_missing: ::core::option::Option<bool>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DropIndexResponse {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BuildDeferredIndexesRequest {
    #[prost(string, tag = "1")]
    pub bucket_name: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    pub scope_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub collection_name: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BuildDeferredIndexesResponse {
    #[prost(message, repeated, tag = "1")]
    pub indexes: ::prost::alloc::vec::Vec<build_deferred_indexes_response::Index>,
}
/// Nested message and enum types in `BuildDeferredIndexesResponse`.
pub mod build_deferred_indexes_response {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Index {
        #[prost(string, tag = "1")]
        pub bucket_name: ::prost::alloc::string::String,
        #[prost(string, optional, tag = "2")]
        pub scope_name: ::core::option::Option<::prost::alloc::string::String>,
        #[prost(string, optional, tag = "3")]
        pub collection_name: ::core::option::Option<::prost::alloc::string::String>,
        #[prost(string, tag = "4")]
        pub name: ::prost::alloc::string::String,
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WaitForIndexOnlineRequest {
    #[prost(string, tag = "1")]
    pub bucket_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub scope_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub collection_name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WaitForIndexOnlineResponse {}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum IndexType {
    View = 0,
    Gsi = 1,
}
impl IndexType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            IndexType::View => "INDEX_TYPE_VIEW",
            IndexType::Gsi => "INDEX_TYPE_GSI",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "INDEX_TYPE_VIEW" => Some(Self::View),
            "INDEX_TYPE_GSI" => Some(Self::Gsi),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum IndexState {
    Deferred = 0,
    Building = 1,
    Pending = 2,
    Online = 3,
    Offline = 4,
    Abridged = 5,
    Scheduled = 6,
}
impl IndexState {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            IndexState::Deferred => "INDEX_STATE_DEFERRED",
            IndexState::Building => "INDEX_STATE_BUILDING",
            IndexState::Pending => "INDEX_STATE_PENDING",
            IndexState::Online => "INDEX_STATE_ONLINE",
            IndexState::Offline => "INDEX_STATE_OFFLINE",
            IndexState::Abridged => "INDEX_STATE_ABRIDGED",
            IndexState::Scheduled => "INDEX_STATE_SCHEDULED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "INDEX_STATE_DEFERRED" => Some(Self::Deferred),
            "INDEX_STATE_BUILDING" => Some(Self::Building),
            "INDEX_STATE_PENDING" => Some(Self::Pending),
            "INDEX_STATE_ONLINE" => Some(Self::Online),
            "INDEX_STATE_OFFLINE" => Some(Self::Offline),
            "INDEX_STATE_ABRIDGED" => Some(Self::Abridged),
            "INDEX_STATE_SCHEDULED" => Some(Self::Scheduled),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod query_admin_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct QueryAdminServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl QueryAdminServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryAdminServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryAdminServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            QueryAdminServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn get_all_indexes(
            &mut self,
            request: impl tonic::IntoRequest<super::GetAllIndexesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetAllIndexesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/couchbase.admin.query.v1.QueryAdminService/GetAllIndexes",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "couchbase.admin.query.v1.QueryAdminService",
                        "GetAllIndexes",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn create_primary_index(
            &mut self,
            request: impl tonic::IntoRequest<super::CreatePrimaryIndexRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreatePrimaryIndexResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/couchbase.admin.query.v1.QueryAdminService/CreatePrimaryIndex",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "couchbase.admin.query.v1.QueryAdminService",
                        "CreatePrimaryIndex",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn create_index(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateIndexRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateIndexResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/couchbase.admin.query.v1.QueryAdminService/CreateIndex",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "couchbase.admin.query.v1.QueryAdminService",
                        "CreateIndex",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn drop_primary_index(
            &mut self,
            request: impl tonic::IntoRequest<super::DropPrimaryIndexRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DropPrimaryIndexResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/couchbase.admin.query.v1.QueryAdminService/DropPrimaryIndex",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "couchbase.admin.query.v1.QueryAdminService",
                        "DropPrimaryIndex",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn drop_index(
            &mut self,
            request: impl tonic::IntoRequest<super::DropIndexRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DropIndexResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/couchbase.admin.query.v1.QueryAdminService/DropIndex",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "couchbase.admin.query.v1.QueryAdminService",
                        "DropIndex",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn build_deferred_indexes(
            &mut self,
            request: impl tonic::IntoRequest<super::BuildDeferredIndexesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BuildDeferredIndexesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/couchbase.admin.query.v1.QueryAdminService/BuildDeferredIndexes",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "couchbase.admin.query.v1.QueryAdminService",
                        "BuildDeferredIndexes",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn wait_for_index_online(
            &mut self,
            request: impl tonic::IntoRequest<super::WaitForIndexOnlineRequest>,
        ) -> std::result::Result<
            tonic::Response<super::WaitForIndexOnlineResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/couchbase.admin.query.v1.QueryAdminService/WaitForIndexOnline",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "couchbase.admin.query.v1.QueryAdminService",
                        "WaitForIndexOnline",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
