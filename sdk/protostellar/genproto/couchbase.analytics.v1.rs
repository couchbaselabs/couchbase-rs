// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnalyticsQueryRequest {
    #[prost(string, optional, tag = "9")]
    pub analytics_scope_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "1")]
    pub statement: ::prost::alloc::string::String,
    #[prost(bool, optional, tag = "2")]
    pub read_only: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "3")]
    pub client_context_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "4")]
    pub priority: ::core::option::Option<bool>,
    #[prost(
        enumeration = "analytics_query_request::ScanConsistency",
        optional,
        tag = "5"
    )]
    pub scan_consistency: ::core::option::Option<i32>,
    #[prost(bytes = "vec", repeated, tag = "6")]
    pub positional_parameters: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(map = "string, bytes", tag = "7")]
    pub named_parameters: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::vec::Vec<u8>,
    >,
    #[prost(enumeration = "analytics_query_request::PlanFormat", optional, tag = "10")]
    pub plan_format: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "11")]
    pub include_logical_plan: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "12")]
    pub include_organized_logical_plan: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "13")]
    pub include_expression_tree: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "14")]
    pub include_rewritten_expression_tree: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "15")]
    pub max_warnings: ::core::option::Option<i32>,
}
/// Nested message and enum types in `AnalyticsQueryRequest`.
pub mod analytics_query_request {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ScanConsistency {
        NotBounded = 0,
        RequestPlus = 1,
    }
    impl ScanConsistency {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                ScanConsistency::NotBounded => "SCAN_CONSISTENCY_NOT_BOUNDED",
                ScanConsistency::RequestPlus => "SCAN_CONSISTENCY_REQUEST_PLUS",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "SCAN_CONSISTENCY_NOT_BOUNDED" => Some(Self::NotBounded),
                "SCAN_CONSISTENCY_REQUEST_PLUS" => Some(Self::RequestPlus),
                _ => None,
            }
        }
    }
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum PlanFormat {
        Json = 0,
        String = 1,
    }
    impl PlanFormat {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                PlanFormat::Json => "PLAN_FORMAT_JSON",
                PlanFormat::String => "PLAN_FORMAT_STRING",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "PLAN_FORMAT_JSON" => Some(Self::Json),
                "PLAN_FORMAT_STRING" => Some(Self::String),
                _ => None,
            }
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnalyticsQueryResponse {
    #[prost(bytes = "vec", repeated, tag = "1")]
    pub rows: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(message, optional, tag = "2")]
    pub meta_data: ::core::option::Option<analytics_query_response::MetaData>,
}
/// Nested message and enum types in `AnalyticsQueryResponse`.
pub mod analytics_query_response {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Metrics {
        #[prost(message, optional, tag = "1")]
        pub elapsed_time: ::core::option::Option<::prost_types::Duration>,
        #[prost(message, optional, tag = "2")]
        pub execution_time: ::core::option::Option<::prost_types::Duration>,
        #[prost(uint64, tag = "3")]
        pub result_count: u64,
        #[prost(uint64, tag = "4")]
        pub result_size: u64,
        #[prost(uint64, tag = "5")]
        pub mutation_count: u64,
        #[prost(uint64, tag = "6")]
        pub sort_count: u64,
        #[prost(uint64, tag = "7")]
        pub error_count: u64,
        #[prost(uint64, tag = "8")]
        pub warning_count: u64,
        #[prost(uint64, tag = "9")]
        pub processed_objects: u64,
    }
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct MetaData {
        #[prost(string, tag = "1")]
        pub request_id: ::prost::alloc::string::String,
        #[prost(string, tag = "2")]
        pub client_context_id: ::prost::alloc::string::String,
        #[prost(message, optional, tag = "3")]
        pub metrics: ::core::option::Option<Metrics>,
        #[prost(bytes = "vec", tag = "4")]
        pub signature: ::prost::alloc::vec::Vec<u8>,
        #[prost(message, repeated, tag = "5")]
        pub warnings: ::prost::alloc::vec::Vec<meta_data::Warning>,
        #[prost(string, tag = "6")]
        pub status: ::prost::alloc::string::String,
        #[prost(bytes = "vec", optional, tag = "7")]
        pub logical_plan: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
        #[prost(bytes = "vec", optional, tag = "8")]
        pub optimized_logical_plan: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
        #[prost(string, optional, tag = "9")]
        pub expression_tree: ::core::option::Option<::prost::alloc::string::String>,
        #[prost(string, optional, tag = "10")]
        pub rewritten_expression_tree: ::core::option::Option<
            ::prost::alloc::string::String,
        >,
    }
    /// Nested message and enum types in `MetaData`.
    pub mod meta_data {
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct Warning {
            #[prost(uint32, tag = "1")]
            pub code: u32,
            #[prost(string, tag = "2")]
            pub message: ::prost::alloc::string::String,
        }
    }
}
/// Generated client implementations.
pub mod analytics_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct AnalyticsServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl AnalyticsServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> AnalyticsServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> AnalyticsServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            AnalyticsServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn analytics_query(
            &mut self,
            request: impl tonic::IntoRequest<super::AnalyticsQueryRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::AnalyticsQueryResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/couchbase.analytics.v1.AnalyticsService/AnalyticsQuery",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "couchbase.analytics.v1.AnalyticsService",
                        "AnalyticsQuery",
                    ),
                );
            self.inner.server_streaming(req, path, codec).await
        }
    }
}
